// Code generated by mockery v2.20.0. DO NOT EDIT.

package util

import mock "github.com/stretchr/testify/mock"

// Cloner is an autogenerated mock type for the Cloner type
type Cloner[T interface{}] struct {
	mock.Mock
}

type Cloner_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Cloner[T]) EXPECT() *Cloner_Expecter[T] {
	return &Cloner_Expecter[T]{mock: &_m.Mock}
}

// Clone provides a mock function with given fields:
func (_m *Cloner[T]) Clone() T {
	ret := _m.Called()

	var r0 T
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// Cloner_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type Cloner_Clone_Call[T interface{}] struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
func (_e *Cloner_Expecter[T]) Clone() *Cloner_Clone_Call[T] {
	return &Cloner_Clone_Call[T]{Call: _e.mock.On("Clone")}
}

func (_c *Cloner_Clone_Call[T]) Run(run func()) *Cloner_Clone_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cloner_Clone_Call[T]) Return(_a0 T) *Cloner_Clone_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cloner_Clone_Call[T]) RunAndReturn(run func() T) *Cloner_Clone_Call[T] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCloner interface {
	mock.TestingT
	Cleanup(func())
}

// NewCloner creates a new instance of Cloner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCloner[T interface{}](t mockConstructorTestingTNewCloner) *Cloner[T] {
	mock := &Cloner[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
