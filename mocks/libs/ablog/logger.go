// Code generated by mockery v2.20.0. DO NOT EDIT.

package ablog

import mock "github.com/stretchr/testify/mock"

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg
func (_m *Logger) Debug(msg string) {
	_m.Called(msg)
}

// Logger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Logger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
func (_e *Logger_Expecter) Debug(msg interface{}) *Logger_Debug_Call {
	return &Logger_Debug_Call{Call: _e.mock.On("Debug", msg)}
}

func (_c *Logger_Debug_Call) Run(run func(msg string)) *Logger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Logger_Debug_Call) Return() *Logger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debug_Call) RunAndReturn(run func(string)) *Logger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Debugf provides a mock function with given fields: msg, args
func (_m *Logger) Debugf(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type Logger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Debugf(msg interface{}, args ...interface{}) *Logger_Debugf_Call {
	return &Logger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{msg}, args...)...)}
}

func (_c *Logger_Debugf_Call) Run(run func(msg string, args ...interface{})) *Logger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debugf_Call) Return() *Logger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debugf_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Debugf_Call {
	_c.Call.Return(run)
	return _c
}

// Debugw provides a mock function with given fields: msg, args
func (_m *Logger) Debugw(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Debugw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugw'
type Logger_Debugw_Call struct {
	*mock.Call
}

// Debugw is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Debugw(msg interface{}, args ...interface{}) *Logger_Debugw_Call {
	return &Logger_Debugw_Call{Call: _e.mock.On("Debugw",
		append([]interface{}{msg}, args...)...)}
}

func (_c *Logger_Debugw_Call) Run(run func(msg string, args ...interface{})) *Logger_Debugw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debugw_Call) Return() *Logger_Debugw_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debugw_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Debugw_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: err
func (_m *Logger) Error(err error) {
	_m.Called(err)
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - err error
func (_e *Logger_Expecter) Error(err interface{}) *Logger_Error_Call {
	return &Logger_Error_Call{Call: _e.mock.On("Error", err)}
}

func (_c *Logger_Error_Call) Run(run func(err error)) *Logger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Logger_Error_Call) Return() *Logger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call) RunAndReturn(run func(error)) *Logger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Errorf provides a mock function with given fields: err, msg, args
func (_m *Logger) Errorf(err error, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type Logger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - err error
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Errorf(err interface{}, msg interface{}, args ...interface{}) *Logger_Errorf_Call {
	return &Logger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{err, msg}, args...)...)}
}

func (_c *Logger_Errorf_Call) Run(run func(err error, msg string, args ...interface{})) *Logger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Errorf_Call) Return() *Logger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Errorf_Call) RunAndReturn(run func(error, string, ...interface{})) *Logger_Errorf_Call {
	_c.Call.Return(run)
	return _c
}

// Errorw provides a mock function with given fields: err, msg, args
func (_m *Logger) Errorw(err error, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Errorw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorw'
type Logger_Errorw_Call struct {
	*mock.Call
}

// Errorw is a helper method to define mock.On call
//   - err error
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Errorw(err interface{}, msg interface{}, args ...interface{}) *Logger_Errorw_Call {
	return &Logger_Errorw_Call{Call: _e.mock.On("Errorw",
		append([]interface{}{err, msg}, args...)...)}
}

func (_c *Logger_Errorw_Call) Run(run func(err error, msg string, args ...interface{})) *Logger_Errorw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Errorw_Call) Return() *Logger_Errorw_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Errorw_Call) RunAndReturn(run func(error, string, ...interface{})) *Logger_Errorw_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: err
func (_m *Logger) Fatal(err error) {
	_m.Called(err)
}

// Logger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type Logger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - err error
func (_e *Logger_Expecter) Fatal(err interface{}) *Logger_Fatal_Call {
	return &Logger_Fatal_Call{Call: _e.mock.On("Fatal", err)}
}

func (_c *Logger_Fatal_Call) Run(run func(err error)) *Logger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Logger_Fatal_Call) Return() *Logger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Fatal_Call) RunAndReturn(run func(error)) *Logger_Fatal_Call {
	_c.Call.Return(run)
	return _c
}

// Fatalf provides a mock function with given fields: err, msg, args
func (_m *Logger) Fatalf(err error, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type Logger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - err error
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Fatalf(err interface{}, msg interface{}, args ...interface{}) *Logger_Fatalf_Call {
	return &Logger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{err, msg}, args...)...)}
}

func (_c *Logger_Fatalf_Call) Run(run func(err error, msg string, args ...interface{})) *Logger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Fatalf_Call) Return() *Logger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Fatalf_Call) RunAndReturn(run func(error, string, ...interface{})) *Logger_Fatalf_Call {
	_c.Call.Return(run)
	return _c
}

// Fatalw provides a mock function with given fields: err, msg, args
func (_m *Logger) Fatalw(err error, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Fatalw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalw'
type Logger_Fatalw_Call struct {
	*mock.Call
}

// Fatalw is a helper method to define mock.On call
//   - err error
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Fatalw(err interface{}, msg interface{}, args ...interface{}) *Logger_Fatalw_Call {
	return &Logger_Fatalw_Call{Call: _e.mock.On("Fatalw",
		append([]interface{}{err, msg}, args...)...)}
}

func (_c *Logger_Fatalw_Call) Run(run func(err error, msg string, args ...interface{})) *Logger_Fatalw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Fatalw_Call) Return() *Logger_Fatalw_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Fatalw_Call) RunAndReturn(run func(error, string, ...interface{})) *Logger_Fatalw_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg
func (_m *Logger) Info(msg string) {
	_m.Called(msg)
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
func (_e *Logger_Expecter) Info(msg interface{}) *Logger_Info_Call {
	return &Logger_Info_Call{Call: _e.mock.On("Info", msg)}
}

func (_c *Logger_Info_Call) Run(run func(msg string)) *Logger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Logger_Info_Call) Return() *Logger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call) RunAndReturn(run func(string)) *Logger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Infof provides a mock function with given fields: msg, args
func (_m *Logger) Infof(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type Logger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Infof(msg interface{}, args ...interface{}) *Logger_Infof_Call {
	return &Logger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{msg}, args...)...)}
}

func (_c *Logger_Infof_Call) Run(run func(msg string, args ...interface{})) *Logger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Infof_Call) Return() *Logger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Infof_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Infof_Call {
	_c.Call.Return(run)
	return _c
}

// Infow provides a mock function with given fields: msg, args
func (_m *Logger) Infow(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Infow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infow'
type Logger_Infow_Call struct {
	*mock.Call
}

// Infow is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Infow(msg interface{}, args ...interface{}) *Logger_Infow_Call {
	return &Logger_Infow_Call{Call: _e.mock.On("Infow",
		append([]interface{}{msg}, args...)...)}
}

func (_c *Logger_Infow_Call) Run(run func(msg string, args ...interface{})) *Logger_Infow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Infow_Call) Return() *Logger_Infow_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Infow_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Infow_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields:
func (_m *Logger) Sync() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logger_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type Logger_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
func (_e *Logger_Expecter) Sync() *Logger_Sync_Call {
	return &Logger_Sync_Call{Call: _e.mock.On("Sync")}
}

func (_c *Logger_Sync_Call) Run(run func()) *Logger_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Logger_Sync_Call) Return(_a0 error) *Logger_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_Sync_Call) RunAndReturn(run func() error) *Logger_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: err
func (_m *Logger) Warn(err error) {
	_m.Called(err)
}

// Logger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Logger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - err error
func (_e *Logger_Expecter) Warn(err interface{}) *Logger_Warn_Call {
	return &Logger_Warn_Call{Call: _e.mock.On("Warn", err)}
}

func (_c *Logger_Warn_Call) Run(run func(err error)) *Logger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Logger_Warn_Call) Return() *Logger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warn_Call) RunAndReturn(run func(error)) *Logger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// Warnf provides a mock function with given fields: err, msg, args
func (_m *Logger) Warnf(err error, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type Logger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - err error
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Warnf(err interface{}, msg interface{}, args ...interface{}) *Logger_Warnf_Call {
	return &Logger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{err, msg}, args...)...)}
}

func (_c *Logger_Warnf_Call) Run(run func(err error, msg string, args ...interface{})) *Logger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warnf_Call) Return() *Logger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warnf_Call) RunAndReturn(run func(error, string, ...interface{})) *Logger_Warnf_Call {
	_c.Call.Return(run)
	return _c
}

// Warnw provides a mock function with given fields: err, msg, args
func (_m *Logger) Warnw(err error, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Warnw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnw'
type Logger_Warnw_Call struct {
	*mock.Call
}

// Warnw is a helper method to define mock.On call
//   - err error
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Warnw(err interface{}, msg interface{}, args ...interface{}) *Logger_Warnw_Call {
	return &Logger_Warnw_Call{Call: _e.mock.On("Warnw",
		append([]interface{}{err, msg}, args...)...)}
}

func (_c *Logger_Warnw_Call) Run(run func(err error, msg string, args ...interface{})) *Logger_Warnw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warnw_Call) Return() *Logger_Warnw_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warnw_Call) RunAndReturn(run func(error, string, ...interface{})) *Logger_Warnw_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
