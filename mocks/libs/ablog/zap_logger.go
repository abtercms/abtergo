// Code generated by mockery v2.20.0. DO NOT EDIT.

package ablog

import (
	mock "github.com/stretchr/testify/mock"
	zap "go.uber.org/zap"

	zapcore "go.uber.org/zap/zapcore"
)

// ZapLogger is an autogenerated mock type for the ZapLogger type
type ZapLogger struct {
	mock.Mock
}

type ZapLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *ZapLogger) EXPECT() *ZapLogger_Expecter {
	return &ZapLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg, fields
func (_m *ZapLogger) Debug(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ZapLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type ZapLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - fields ...zapcore.Field
func (_e *ZapLogger_Expecter) Debug(msg interface{}, fields ...interface{}) *ZapLogger_Debug_Call {
	return &ZapLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ZapLogger_Debug_Call) Run(run func(msg string, fields ...zapcore.Field)) *ZapLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]zapcore.Field, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(zapcore.Field)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ZapLogger_Debug_Call) Return() *ZapLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *ZapLogger_Debug_Call) RunAndReturn(run func(string, ...zapcore.Field)) *ZapLogger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: msg, fields
func (_m *ZapLogger) Error(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ZapLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type ZapLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - fields ...zapcore.Field
func (_e *ZapLogger_Expecter) Error(msg interface{}, fields ...interface{}) *ZapLogger_Error_Call {
	return &ZapLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ZapLogger_Error_Call) Run(run func(msg string, fields ...zapcore.Field)) *ZapLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]zapcore.Field, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(zapcore.Field)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ZapLogger_Error_Call) Return() *ZapLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *ZapLogger_Error_Call) RunAndReturn(run func(string, ...zapcore.Field)) *ZapLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: msg, fields
func (_m *ZapLogger) Fatal(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ZapLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type ZapLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - msg string
//   - fields ...zapcore.Field
func (_e *ZapLogger_Expecter) Fatal(msg interface{}, fields ...interface{}) *ZapLogger_Fatal_Call {
	return &ZapLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ZapLogger_Fatal_Call) Run(run func(msg string, fields ...zapcore.Field)) *ZapLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]zapcore.Field, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(zapcore.Field)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ZapLogger_Fatal_Call) Return() *ZapLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *ZapLogger_Fatal_Call) RunAndReturn(run func(string, ...zapcore.Field)) *ZapLogger_Fatal_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg, fields
func (_m *ZapLogger) Info(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ZapLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type ZapLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - fields ...zapcore.Field
func (_e *ZapLogger_Expecter) Info(msg interface{}, fields ...interface{}) *ZapLogger_Info_Call {
	return &ZapLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ZapLogger_Info_Call) Run(run func(msg string, fields ...zapcore.Field)) *ZapLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]zapcore.Field, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(zapcore.Field)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ZapLogger_Info_Call) Return() *ZapLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *ZapLogger_Info_Call) RunAndReturn(run func(string, ...zapcore.Field)) *ZapLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Sugar provides a mock function with given fields:
func (_m *ZapLogger) Sugar() *zap.SugaredLogger {
	ret := _m.Called()

	var r0 *zap.SugaredLogger
	if rf, ok := ret.Get(0).(func() *zap.SugaredLogger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.SugaredLogger)
		}
	}

	return r0
}

// ZapLogger_Sugar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sugar'
type ZapLogger_Sugar_Call struct {
	*mock.Call
}

// Sugar is a helper method to define mock.On call
func (_e *ZapLogger_Expecter) Sugar() *ZapLogger_Sugar_Call {
	return &ZapLogger_Sugar_Call{Call: _e.mock.On("Sugar")}
}

func (_c *ZapLogger_Sugar_Call) Run(run func()) *ZapLogger_Sugar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ZapLogger_Sugar_Call) Return(_a0 *zap.SugaredLogger) *ZapLogger_Sugar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ZapLogger_Sugar_Call) RunAndReturn(run func() *zap.SugaredLogger) *ZapLogger_Sugar_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields:
func (_m *ZapLogger) Sync() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ZapLogger_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type ZapLogger_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
func (_e *ZapLogger_Expecter) Sync() *ZapLogger_Sync_Call {
	return &ZapLogger_Sync_Call{Call: _e.mock.On("Sync")}
}

func (_c *ZapLogger_Sync_Call) Run(run func()) *ZapLogger_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ZapLogger_Sync_Call) Return(_a0 error) *ZapLogger_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ZapLogger_Sync_Call) RunAndReturn(run func() error) *ZapLogger_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: msg, fields
func (_m *ZapLogger) Warn(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ZapLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type ZapLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - fields ...zapcore.Field
func (_e *ZapLogger_Expecter) Warn(msg interface{}, fields ...interface{}) *ZapLogger_Warn_Call {
	return &ZapLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ZapLogger_Warn_Call) Run(run func(msg string, fields ...zapcore.Field)) *ZapLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]zapcore.Field, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(zapcore.Field)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ZapLogger_Warn_Call) Return() *ZapLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *ZapLogger_Warn_Call) RunAndReturn(run func(string, ...zapcore.Field)) *ZapLogger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewZapLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewZapLogger creates a new instance of ZapLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewZapLogger(t mockConstructorTestingTNewZapLogger) *ZapLogger {
	mock := &ZapLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
