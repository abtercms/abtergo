// Code generated by mockery v2.20.0. DO NOT EDIT.

package page

import (
	pkgpage "github.com/abtergo/abtergo/pkg/page"
	mock "github.com/stretchr/testify/mock"
)

// Updater is an autogenerated mock type for the Updater type
type Updater struct {
	mock.Mock
}

type Updater_Expecter struct {
	mock *mock.Mock
}

func (_m *Updater) EXPECT() *Updater_Expecter {
	return &Updater_Expecter{mock: &_m.Mock}
}

// Transition provides a mock function with given fields: status, trigger
func (_m *Updater) Transition(status pkgpage.Status, trigger pkgpage.Trigger) (pkgpage.Status, error) {
	ret := _m.Called(status, trigger)

	var r0 pkgpage.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(pkgpage.Status, pkgpage.Trigger) (pkgpage.Status, error)); ok {
		return rf(status, trigger)
	}
	if rf, ok := ret.Get(0).(func(pkgpage.Status, pkgpage.Trigger) pkgpage.Status); ok {
		r0 = rf(status, trigger)
	} else {
		r0 = ret.Get(0).(pkgpage.Status)
	}

	if rf, ok := ret.Get(1).(func(pkgpage.Status, pkgpage.Trigger) error); ok {
		r1 = rf(status, trigger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Updater_Transition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transition'
type Updater_Transition_Call struct {
	*mock.Call
}

// Transition is a helper method to define mock.On call
//   - status pkgpage.Status
//   - trigger pkgpage.Trigger
func (_e *Updater_Expecter) Transition(status interface{}, trigger interface{}) *Updater_Transition_Call {
	return &Updater_Transition_Call{Call: _e.mock.On("Transition", status, trigger)}
}

func (_c *Updater_Transition_Call) Run(run func(status pkgpage.Status, trigger pkgpage.Trigger)) *Updater_Transition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pkgpage.Status), args[1].(pkgpage.Trigger))
	})
	return _c
}

func (_c *Updater_Transition_Call) Return(_a0 pkgpage.Status, _a1 error) *Updater_Transition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Updater_Transition_Call) RunAndReturn(run func(pkgpage.Status, pkgpage.Trigger) (pkgpage.Status, error)) *Updater_Transition_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUpdater interface {
	mock.TestingT
	Cleanup(func())
}

// NewUpdater creates a new instance of Updater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUpdater(t mockConstructorTestingTNewUpdater) *Updater {
	mock := &Updater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
