// Code generated by mockery v2.20.0. DO NOT EDIT.

package page

import (
	context "context"

	pkgpage "github.com/abtergo/abtergo/pkg/page"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, page
func (_m *Service) Create(ctx context.Context, page pkgpage.Page) (pkgpage.Page, error) {
	ret := _m.Called(ctx, page)

	var r0 pkgpage.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgpage.Page) (pkgpage.Page, error)); ok {
		return rf(ctx, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkgpage.Page) pkgpage.Page); ok {
		r0 = rf(ctx, page)
	} else {
		r0 = ret.Get(0).(pkgpage.Page)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkgpage.Page) error); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Service_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - page pkgpage.Page
func (_e *Service_Expecter) Create(ctx interface{}, page interface{}) *Service_Create_Call {
	return &Service_Create_Call{Call: _e.mock.On("Create", ctx, page)}
}

func (_c *Service_Create_Call) Run(run func(ctx context.Context, page pkgpage.Page)) *Service_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgpage.Page))
	})
	return _c
}

func (_c *Service_Create_Call) Return(_a0 pkgpage.Page, _a1 error) *Service_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Create_Call) RunAndReturn(run func(context.Context, pkgpage.Page) (pkgpage.Page, error)) *Service_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id, oldETag
func (_m *Service) Delete(ctx context.Context, id string, oldETag string) error {
	ret := _m.Called(ctx, id, oldETag)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, oldETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Service_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - oldETag string
func (_e *Service_Expecter) Delete(ctx interface{}, id interface{}, oldETag interface{}) *Service_Delete_Call {
	return &Service_Delete_Call{Call: _e.mock.On("Delete", ctx, id, oldETag)}
}

func (_c *Service_Delete_Call) Run(run func(ctx context.Context, id string, oldETag string)) *Service_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_Delete_Call) Return(_a0 error) *Service_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *Service_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *Service) Get(ctx context.Context, id string) (pkgpage.Page, error) {
	ret := _m.Called(ctx, id)

	var r0 pkgpage.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pkgpage.Page, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pkgpage.Page); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(pkgpage.Page)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Service_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Service_Expecter) Get(ctx interface{}, id interface{}) *Service_Get_Call {
	return &Service_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Service_Get_Call) Run(run func(ctx context.Context, id string)) *Service_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_Get_Call) Return(_a0 pkgpage.Page, _a1 error) *Service_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Get_Call) RunAndReturn(run func(context.Context, string) (pkgpage.Page, error)) *Service_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *Service) List(ctx context.Context, filter pkgpage.Filter) ([]pkgpage.Page, error) {
	ret := _m.Called(ctx, filter)

	var r0 []pkgpage.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgpage.Filter) ([]pkgpage.Page, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkgpage.Filter) []pkgpage.Page); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkgpage.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkgpage.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Service_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter pkgpage.Filter
func (_e *Service_Expecter) List(ctx interface{}, filter interface{}) *Service_List_Call {
	return &Service_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *Service_List_Call) Run(run func(ctx context.Context, filter pkgpage.Filter)) *Service_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgpage.Filter))
	})
	return _c
}

func (_c *Service_List_Call) Return(_a0 []pkgpage.Page, _a1 error) *Service_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_List_Call) RunAndReturn(run func(context.Context, pkgpage.Filter) ([]pkgpage.Page, error)) *Service_List_Call {
	_c.Call.Return(run)
	return _c
}

// Transition provides a mock function with given fields: ctx, id, trigger, oldEtag
func (_m *Service) Transition(ctx context.Context, id string, trigger pkgpage.Trigger, oldEtag string) (pkgpage.Page, error) {
	ret := _m.Called(ctx, id, trigger, oldEtag)

	var r0 pkgpage.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pkgpage.Trigger, string) (pkgpage.Page, error)); ok {
		return rf(ctx, id, trigger, oldEtag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pkgpage.Trigger, string) pkgpage.Page); ok {
		r0 = rf(ctx, id, trigger, oldEtag)
	} else {
		r0 = ret.Get(0).(pkgpage.Page)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pkgpage.Trigger, string) error); ok {
		r1 = rf(ctx, id, trigger, oldEtag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Transition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transition'
type Service_Transition_Call struct {
	*mock.Call
}

// Transition is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - trigger pkgpage.Trigger
//   - oldEtag string
func (_e *Service_Expecter) Transition(ctx interface{}, id interface{}, trigger interface{}, oldEtag interface{}) *Service_Transition_Call {
	return &Service_Transition_Call{Call: _e.mock.On("Transition", ctx, id, trigger, oldEtag)}
}

func (_c *Service_Transition_Call) Run(run func(ctx context.Context, id string, trigger pkgpage.Trigger, oldEtag string)) *Service_Transition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(pkgpage.Trigger), args[3].(string))
	})
	return _c
}

func (_c *Service_Transition_Call) Return(_a0 pkgpage.Page, _a1 error) *Service_Transition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Transition_Call) RunAndReturn(run func(context.Context, string, pkgpage.Trigger, string) (pkgpage.Page, error)) *Service_Transition_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, page, oldETag
func (_m *Service) Update(ctx context.Context, id string, page pkgpage.Page, oldETag string) (pkgpage.Page, error) {
	ret := _m.Called(ctx, id, page, oldETag)

	var r0 pkgpage.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pkgpage.Page, string) (pkgpage.Page, error)); ok {
		return rf(ctx, id, page, oldETag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pkgpage.Page, string) pkgpage.Page); ok {
		r0 = rf(ctx, id, page, oldETag)
	} else {
		r0 = ret.Get(0).(pkgpage.Page)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pkgpage.Page, string) error); ok {
		r1 = rf(ctx, id, page, oldETag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Service_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - page pkgpage.Page
//   - oldETag string
func (_e *Service_Expecter) Update(ctx interface{}, id interface{}, page interface{}, oldETag interface{}) *Service_Update_Call {
	return &Service_Update_Call{Call: _e.mock.On("Update", ctx, id, page, oldETag)}
}

func (_c *Service_Update_Call) Run(run func(ctx context.Context, id string, page pkgpage.Page, oldETag string)) *Service_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(pkgpage.Page), args[3].(string))
	})
	return _c
}

func (_c *Service_Update_Call) Return(_a0 pkgpage.Page, _a1 error) *Service_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Update_Call) RunAndReturn(run func(context.Context, string, pkgpage.Page, string) (pkgpage.Page, error)) *Service_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
