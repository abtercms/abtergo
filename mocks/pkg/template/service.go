// Code generated by mockery v2.20.0. DO NOT EDIT.

package template

import (
	context "context"

	pkgtemplate "github.com/abtergo/abtergo/pkg/template"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, template
func (_m *Service) Create(ctx context.Context, template pkgtemplate.Template) (pkgtemplate.Template, error) {
	ret := _m.Called(ctx, template)

	var r0 pkgtemplate.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgtemplate.Template) (pkgtemplate.Template, error)); ok {
		return rf(ctx, template)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkgtemplate.Template) pkgtemplate.Template); ok {
		r0 = rf(ctx, template)
	} else {
		r0 = ret.Get(0).(pkgtemplate.Template)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkgtemplate.Template) error); ok {
		r1 = rf(ctx, template)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Service_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - template pkgtemplate.Template
func (_e *Service_Expecter) Create(ctx interface{}, template interface{}) *Service_Create_Call {
	return &Service_Create_Call{Call: _e.mock.On("Create", ctx, template)}
}

func (_c *Service_Create_Call) Run(run func(ctx context.Context, template pkgtemplate.Template)) *Service_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgtemplate.Template))
	})
	return _c
}

func (_c *Service_Create_Call) Return(_a0 pkgtemplate.Template, _a1 error) *Service_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Create_Call) RunAndReturn(run func(context.Context, pkgtemplate.Template) (pkgtemplate.Template, error)) *Service_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Service) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Service_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Service_Expecter) Delete(ctx interface{}, id interface{}) *Service_Delete_Call {
	return &Service_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Service_Delete_Call) Run(run func(ctx context.Context, id string)) *Service_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_Delete_Call) Return(_a0 error) *Service_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Service_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *Service) Get(ctx context.Context, id string) (pkgtemplate.Template, error) {
	ret := _m.Called(ctx, id)

	var r0 pkgtemplate.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pkgtemplate.Template, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pkgtemplate.Template); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(pkgtemplate.Template)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Service_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Service_Expecter) Get(ctx interface{}, id interface{}) *Service_Get_Call {
	return &Service_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Service_Get_Call) Run(run func(ctx context.Context, id string)) *Service_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_Get_Call) Return(_a0 pkgtemplate.Template, _a1 error) *Service_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Get_Call) RunAndReturn(run func(context.Context, string) (pkgtemplate.Template, error)) *Service_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *Service) List(ctx context.Context, filter pkgtemplate.Filter) ([]pkgtemplate.Template, error) {
	ret := _m.Called(ctx, filter)

	var r0 []pkgtemplate.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgtemplate.Filter) ([]pkgtemplate.Template, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkgtemplate.Filter) []pkgtemplate.Template); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkgtemplate.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkgtemplate.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Service_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter pkgtemplate.Filter
func (_e *Service_Expecter) List(ctx interface{}, filter interface{}) *Service_List_Call {
	return &Service_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *Service_List_Call) Run(run func(ctx context.Context, filter pkgtemplate.Filter)) *Service_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgtemplate.Filter))
	})
	return _c
}

func (_c *Service_List_Call) Return(_a0 []pkgtemplate.Template, _a1 error) *Service_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_List_Call) RunAndReturn(run func(context.Context, pkgtemplate.Filter) ([]pkgtemplate.Template, error)) *Service_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, template, etag
func (_m *Service) Update(ctx context.Context, id string, template pkgtemplate.Template, etag string) (pkgtemplate.Template, error) {
	ret := _m.Called(ctx, id, template, etag)

	var r0 pkgtemplate.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pkgtemplate.Template, string) (pkgtemplate.Template, error)); ok {
		return rf(ctx, id, template, etag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pkgtemplate.Template, string) pkgtemplate.Template); ok {
		r0 = rf(ctx, id, template, etag)
	} else {
		r0 = ret.Get(0).(pkgtemplate.Template)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pkgtemplate.Template, string) error); ok {
		r1 = rf(ctx, id, template, etag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Service_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - template pkgtemplate.Template
//   - etag string
func (_e *Service_Expecter) Update(ctx interface{}, id interface{}, template interface{}, etag interface{}) *Service_Update_Call {
	return &Service_Update_Call{Call: _e.mock.On("Update", ctx, id, template, etag)}
}

func (_c *Service_Update_Call) Run(run func(ctx context.Context, id string, template pkgtemplate.Template, etag string)) *Service_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(pkgtemplate.Template), args[3].(string))
	})
	return _c
}

func (_c *Service_Update_Call) Return(_a0 pkgtemplate.Template, _a1 error) *Service_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Update_Call) RunAndReturn(run func(context.Context, string, pkgtemplate.Template, string) (pkgtemplate.Template, error)) *Service_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
