// Code generated by mockery v2.20.0. DO NOT EDIT.

package template

import (
	context "context"

	pkgtemplate "github.com/abtergo/abtergo/pkg/template"
	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

type Repo_Expecter struct {
	mock *mock.Mock
}

func (_m *Repo) EXPECT() *Repo_Expecter {
	return &Repo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, entity
func (_m *Repo) Create(ctx context.Context, entity pkgtemplate.Template) (pkgtemplate.Template, error) {
	ret := _m.Called(ctx, entity)

	var r0 pkgtemplate.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgtemplate.Template) (pkgtemplate.Template, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkgtemplate.Template) pkgtemplate.Template); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Get(0).(pkgtemplate.Template)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkgtemplate.Template) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity pkgtemplate.Template
func (_e *Repo_Expecter) Create(ctx interface{}, entity interface{}) *Repo_Create_Call {
	return &Repo_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *Repo_Create_Call) Run(run func(ctx context.Context, entity pkgtemplate.Template)) *Repo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgtemplate.Template))
	})
	return _c
}

func (_c *Repo_Create_Call) Return(_a0 pkgtemplate.Template, _a1 error) *Repo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Create_Call) RunAndReturn(run func(context.Context, pkgtemplate.Template) (pkgtemplate.Template, error)) *Repo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repo) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repo_Expecter) Delete(ctx interface{}, id interface{}) *Repo_Delete_Call {
	return &Repo_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Repo_Delete_Call) Run(run func(ctx context.Context, id string)) *Repo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repo_Delete_Call) Return(_a0 error) *Repo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repo_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Repo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *Repo) List(ctx context.Context, filter pkgtemplate.Filter) ([]pkgtemplate.Template, error) {
	ret := _m.Called(ctx, filter)

	var r0 []pkgtemplate.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgtemplate.Filter) ([]pkgtemplate.Template, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkgtemplate.Filter) []pkgtemplate.Template); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkgtemplate.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkgtemplate.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Repo_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter pkgtemplate.Filter
func (_e *Repo_Expecter) List(ctx interface{}, filter interface{}) *Repo_List_Call {
	return &Repo_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *Repo_List_Call) Run(run func(ctx context.Context, filter pkgtemplate.Filter)) *Repo_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgtemplate.Filter))
	})
	return _c
}

func (_c *Repo_List_Call) Return(_a0 []pkgtemplate.Template, _a1 error) *Repo_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_List_Call) RunAndReturn(run func(context.Context, pkgtemplate.Filter) ([]pkgtemplate.Template, error)) *Repo_List_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function with given fields: ctx, id
func (_m *Repo) Retrieve(ctx context.Context, id string) (pkgtemplate.Template, error) {
	ret := _m.Called(ctx, id)

	var r0 pkgtemplate.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pkgtemplate.Template, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pkgtemplate.Template); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(pkgtemplate.Template)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type Repo_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repo_Expecter) Retrieve(ctx interface{}, id interface{}) *Repo_Retrieve_Call {
	return &Repo_Retrieve_Call{Call: _e.mock.On("Retrieve", ctx, id)}
}

func (_c *Repo_Retrieve_Call) Run(run func(ctx context.Context, id string)) *Repo_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repo_Retrieve_Call) Return(_a0 pkgtemplate.Template, _a1 error) *Repo_Retrieve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Retrieve_Call) RunAndReturn(run func(context.Context, string) (pkgtemplate.Template, error)) *Repo_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, entity, etag
func (_m *Repo) Update(ctx context.Context, id string, entity pkgtemplate.Template, etag string) (pkgtemplate.Template, error) {
	ret := _m.Called(ctx, id, entity, etag)

	var r0 pkgtemplate.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pkgtemplate.Template, string) (pkgtemplate.Template, error)); ok {
		return rf(ctx, id, entity, etag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pkgtemplate.Template, string) pkgtemplate.Template); ok {
		r0 = rf(ctx, id, entity, etag)
	} else {
		r0 = ret.Get(0).(pkgtemplate.Template)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pkgtemplate.Template, string) error); ok {
		r1 = rf(ctx, id, entity, etag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - entity pkgtemplate.Template
//   - etag string
func (_e *Repo_Expecter) Update(ctx interface{}, id interface{}, entity interface{}, etag interface{}) *Repo_Update_Call {
	return &Repo_Update_Call{Call: _e.mock.On("Update", ctx, id, entity, etag)}
}

func (_c *Repo_Update_Call) Run(run func(ctx context.Context, id string, entity pkgtemplate.Template, etag string)) *Repo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(pkgtemplate.Template), args[3].(string))
	})
	return _c
}

func (_c *Repo_Update_Call) Return(_a0 pkgtemplate.Template, _a1 error) *Repo_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Update_Call) RunAndReturn(run func(context.Context, string, pkgtemplate.Template, string) (pkgtemplate.Template, error)) *Repo_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepo(t mockConstructorTestingTNewRepo) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
