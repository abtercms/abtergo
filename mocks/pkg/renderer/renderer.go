// Code generated by mockery v2.20.0. DO NOT EDIT.

package renderer

import mock "github.com/stretchr/testify/mock"

// Renderer is an autogenerated mock type for the Renderer type
type Renderer struct {
	mock.Mock
}

type Renderer_Expecter struct {
	mock *mock.Mock
}

func (_m *Renderer) EXPECT() *Renderer_Expecter {
	return &Renderer_Expecter{mock: &_m.Mock}
}

// AddContext provides a mock function with given fields: context
func (_m *Renderer) AddContext(context ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, context...)
	_m.Called(_ca...)
}

// Renderer_AddContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddContext'
type Renderer_AddContext_Call struct {
	*mock.Call
}

// AddContext is a helper method to define mock.On call
//   - context ...interface{}
func (_e *Renderer_Expecter) AddContext(context ...interface{}) *Renderer_AddContext_Call {
	return &Renderer_AddContext_Call{Call: _e.mock.On("AddContext",
		append([]interface{}{}, context...)...)}
}

func (_c *Renderer_AddContext_Call) Run(run func(context ...interface{})) *Renderer_AddContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Renderer_AddContext_Call) Return() *Renderer_AddContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *Renderer_AddContext_Call) RunAndReturn(run func(...interface{})) *Renderer_AddContext_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: template, context
func (_m *Renderer) Render(template string, context ...interface{}) (string, error) {
	var _ca []interface{}
	_ca = append(_ca, template)
	_ca = append(_ca, context...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (string, error)); ok {
		return rf(template, context...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(template, context...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(template, context...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Renderer_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type Renderer_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - template string
//   - context ...interface{}
func (_e *Renderer_Expecter) Render(template interface{}, context ...interface{}) *Renderer_Render_Call {
	return &Renderer_Render_Call{Call: _e.mock.On("Render",
		append([]interface{}{template}, context...)...)}
}

func (_c *Renderer_Render_Call) Run(run func(template string, context ...interface{})) *Renderer_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Renderer_Render_Call) Return(_a0 string, _a1 error) *Renderer_Render_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Renderer_Render_Call) RunAndReturn(run func(string, ...interface{}) (string, error)) *Renderer_Render_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRenderer interface {
	mock.TestingT
	Cleanup(func())
}

// NewRenderer creates a new instance of Renderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRenderer(t mockConstructorTestingTNewRenderer) *Renderer {
	mock := &Renderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
